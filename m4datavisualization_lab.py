# -*- coding: utf-8 -*-
"""M4DataVisualization-lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15kc13gmn8IjUt5A5PUV_IavUO4gfYMYG

<p style="text-align:center">
    <a href="https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDA0321ENSkillsNetwork928-2023-01-01">
    <img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png" width="200" alt="Skills Network Logo"  />
    </a>
</p>

# **Data Visualization Lab**

Estimated time needed: **45 to 60** minutes

In this assignment you will be focusing on the visualization of data.

The data set will be presented to you in the form of a RDBMS.

You will have to use SQL queries to extract the data.

## Objectives

In this lab you will perform the following:

-   Visualize the distribution of data.

-   Visualize the relationship between two features.

-   Visualize composition of data.

-   Visualize comparison of data.

<hr>

## Demo: How to work with database

Download database file.
"""

!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m4_survey_data.sqlite

"""Connect to the database.

"""

import sqlite3
conn = sqlite3.connect("m4_survey_data.sqlite") # open a database connection

"""Import pandas module.

"""

import pandas as pd

"""## Demo: How to run an sql query

"""

# print how many rows are there in the table named 'master'
QUERY = """
SELECT COUNT(*)
FROM master
"""

# the read_sql_query runs the sql query and returns the data as a dataframe
df = pd.read_sql_query(QUERY,conn)
df.head()

"""## Demo: How to list all tables

"""

# print all the tables names in the database
QUERY = """
SELECT name as Table_Name FROM
sqlite_master WHERE
type = 'table'
"""
# the read_sql_query runs the sql query and returns the data as a dataframe
pd.read_sql_query(QUERY,conn)

"""## Demo: How to run a group by query

"""

QUERY = """
SELECT Age,COUNT(*) as count
FROM master
group by age
order by age
"""
pd.read_sql_query(QUERY,conn)

"""## Demo: How to describe a table

"""

table_name = 'master'  # the table you wish to describe

QUERY = """
SELECT sql FROM sqlite_master
WHERE name= '{}'
""".format(table_name)

df = pd.read_sql_query(QUERY,conn)
print(df.iat[0,0])

"""# Hands-on Lab

## Visualizing distribution of data

### Histograms

Plot a histogram of `ConvertedComp.`
"""

# Plot the histogram using seaborn
# Fetch data from the 'ConvertedComp' column
query_data = "SELECT * FROM master"
converted_comp_df = pd.read_sql_query(query_data, conn)

import seaborn as sns
import matplotlib.pyplot as plt

# Plot the histogram using seaborn
sns.histplot(converted_comp_df['ConvertedComp'], bins=30, kde=False, color='skyblue', edgecolor='black')
plt.title('Histogram of ConvertedComp')
plt.xlabel('Converted Compensation')
plt.ylabel('Frequency')
plt.show()

"""### Box Plots

Plot a box plot of `Age.`
"""

# your code goes here

plt.boxplot(converted_comp_df['Age'])

sns.boxplot(x=converted_comp_df['Age'])
plt.title('Box Plot of Age')
plt.xlabel('Age')
plt.show()

"""## Visualizing relationships in data

### Scatter Plots

Create a scatter plot of `Age` and `WorkWeekHrs.`
"""

# your code goes here

# Plot the scatter plot using seaborn
sns.scatterplot(x=converted_comp_df['Age'], y=converted_comp_df['WorkWeekHrs'])
plt.title('Scatter Plot of Age and WorkWeekHrs')
plt.xlabel('Age')
plt.ylabel('WorkWeekHrs')
plt.show()

"""### Bubble Plots

Create a bubble plot of `WorkWeekHrs` and `CodeRevHrs`, use `Age` column as bubble size.
"""

# your code goes here

plt.figure(figsize=(10, 6))
sns.scatterplot(x=converted_comp_df['WorkWeekHrs'], y=converted_comp_df['CodeRevHrs'], size= converted_comp_df['Age'], sizes=(20, 200), alpha=0.7, palette='viridis')
plt.title('Bubble Plot of WorkWeekHrs and CodeRevHrs with Age as Bubble Size')
plt.xlabel('WorkWeekHrs')
plt.ylabel('CodeRevHrs')
plt.show()

"""## Visualizing composition of data

### Pie Charts

Create a pie chart of the top 5 databases that respondents wish to learn next year. Label the pie chart with database names. Display percentages of each database on the pie chart.
"""

plt.figure(figsize=(8, 8))
plt.pie(top_databases, labels=top_databases.index, autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired.colors)
plt.title('Top 5 Databases Respondents Wish to Learn Next Year')
plt.show()

"""### Stacked Charts

Create a stacked chart of median `WorkWeekHrs` and `CodeRevHrs` for the age group 30 to 35.
"""

# your code goes here
new_query_data = """
    SELECT Age, WorkWeekHrs, CodeRevHrs
    FROM master
    WHERE Age >= 30 AND Age <= 35
"""
df_new = pd.read_sql_query(new_query_data, conn)

# prompt:

df_new.groupby('Age').median().plot(kind='bar', stacked=True)
plt.title('Median WorkWeekHrs and CodeRevHrs for Age Group 30 to 35')
plt.xlabel('Age')
plt.ylabel('Hours')
plt.show()

"""## Visualizing comparison of data

### Line Chart

Plot the median `ConvertedComp` for all ages from 45 to 60.
"""

# your code goes here
n_query_data = """
    SELECT Age, ConvertedComp
    FROM master
    WHERE Age >= 45 AND Age <= 60
"""
df_n = pd.read_sql_query(n_query_data, conn)

# Calculate the median ConvertedComp for each age
median_data = df_n.groupby('Age').median()

# Plot the median ConvertedComp using seaborn
plt.figure(figsize=(12, 6))
sns.lineplot(x=median_data.index, y=median_data['ConvertedComp'], marker='o')
plt.title('Median ConvertedComp for Ages 45-60')
plt.xlabel('Age')
plt.ylabel('Median ConvertedComp')
plt.grid(True)
plt.show()

"""### Bar Chart

Create a horizontal bar chart using column `MainBranch.`
"""

# your code goes here
main_query_data = "SELECT MainBranch FROM master"
main_branch_df = pd.read_sql_query(main_query_data, conn)

# Count the occurrences of each branch
branch_counts = main_branch_df['MainBranch'].value_counts()

# Plot the horizontal bar chart using seaborn
plt.figure(figsize=(10, 6))
sns.barplot(x=branch_counts, y=branch_counts.index, palette='viridis')
plt.title('Distribution of MainBranch')
plt.xlabel('Count')
plt.ylabel('MainBranch')
plt.show()

"""Close the database connection.

"""

conn.close()

"""## Authors

Ramesh Sannareddy

### Other Contributors

Rav Ahuja

## Change Log

| Date (YYYY-MM-DD) | Version | Changed By        | Change Description                 |
| ----------------- | ------- | ----------------- | ---------------------------------- |
| 2020-10-17        | 0.1     | Ramesh Sannareddy | Created initial version of the lab |

Copyright Â© 2020 IBM Corporation. This notebook and its source code are released under the terms of the [MIT License](https://cognitiveclass.ai/mit-license?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDA0321ENSkillsNetwork928-2023-01-01&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBM-DA0321EN-SkillsNetwork-21426264&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ).
"""